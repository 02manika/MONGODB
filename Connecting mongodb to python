{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ff57198-ac26-4316-bd01-7561ac24418f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q1. What is MongoDB? Explain non-relational databases in short. In which scenarios it is preferred to use MongoDB over SQL databases?\n",
    "\n",
    "\n",
    "MONGODB is a document oriented database .\n",
    "A non-relational database stores data in a non-tabular form,\n",
    "and tends to be more flexible than the traditional SQL-based , relational database structures. \n",
    "IF our data is unstructured and complex or if we can not  pre-define the schema then it is  better to opt MongoDB."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d1cf50b7-2942-4785-83a1-6e9b35ef8c9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q2. State and Explain the features of MongoDB.\n",
    "\n",
    "1. MONGODB supports JSON data model with dynamic schemas.\n",
    "2. One can index any field in the document.\n",
    "3.The admin can perform Read and Write and the other person copies data from the admin and can only be used for read or back up (not writes).\n",
    "4. Provides high performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c8b3703d-93b5-4121-810d-8acb2060d350",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q3. Write a code to connect MongoDB to Python. Also, create a database and a collection in MongoDB.\n",
    "\n",
    "import pymongo\n",
    "\n",
    "uri = \"mongodb+srv://manika:manika@cluster0.w3sblu6.mongodb.net/?retryWrites=true&w=majority\"\n",
    "\n",
    "# Create a new client and connect to the server\n",
    "client = pymongo.MongoClient(uri)\n",
    "db = client.test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fdf26344-9133-482d-af52-658b6e854f5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Database(MongoClient(host=['ac-znrmtfo-shard-00-01.w3sblu6.mongodb.net:27017', 'ac-znrmtfo-shard-00-02.w3sblu6.mongodb.net:27017', 'ac-znrmtfo-shard-00-00.w3sblu6.mongodb.net:27017'], document_class=dict, tz_aware=False, connect=True, retrywrites=True, w='majority', authsource='admin', replicaset='atlas-9bewns-shard-0', tls=True), 'test')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6073e5f5-39dc-4a3a-9c7e-69617d400a1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "db = client['AGARWAL']             # making database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3391ad7f-17ef-4cbd-ab17-750b7b48f014",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = {\"name\":\"xyz\",\n",
    "       \"branch\":\"cs\",\n",
    "       \"course\":\"b.tech\"}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "095e52dd-195b-4c6a-9d63-6a55b93aa7ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "coll_AGARWAL = db['my_data']            # making collection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bcde2caf-4c28-430e-8229-09438b5cc56b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pymongo.results.InsertOneResult at 0x7fe2181a5570>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coll_AGARWAL.insert_one(data)               # inserting the data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc64aa28-8dc3-46d6-9226-be1353ebd095",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8a066e73-a5b1-4756-a263-e5f8c3240e6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q4. Using the database and the collection created in question number 3, write a code to insert one record,and insert many records. \n",
    "# Use the find() and find_one() methods to print the inserted record.\n",
    "\n",
    "# AS one record is inserted in above question.\n",
    "\n",
    "data2 = [\n",
    "\t{\n",
    "\t\t\"color\": \"red\",\n",
    "\t\t\"value\": \"#f00\"\n",
    "\t},\n",
    "\t{\n",
    "\t\t\"color\": \"green\",\n",
    "\t\t\"value\": \"#0f0\"\n",
    "\t},\n",
    "\t{\n",
    "\t\t\"color\": \"blue\",\n",
    "\t\t\"value\": \"#00f\"\n",
    "\t},\n",
    "\t{\n",
    "\t\t\"color\": \"cyan\",\n",
    "\t\t\"value\": \"#0ff\"\n",
    "\t},\n",
    "\t{\n",
    "\t\t\"color\": \"magenta\",\n",
    "\t\t\"value\": \"#f0f\"\n",
    "\t},\n",
    "\t{\n",
    "\t\t\"color\": \"yellow\",\n",
    "\t\t\"value\": \"#ff0\"\n",
    "\t},\n",
    "\t{\n",
    "\t\t\"color\": \"black\",\n",
    "\t\t\"value\": \"#000\"\n",
    "\t}\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6603edec-cc70-4bbb-b15f-e03d193458b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pymongo.results.InsertManyResult at 0x7fe2181a4a00>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coll_AGARWAL.insert_many(data2)         "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "18aec5f4-9d51-485f-9769-ffb1e7ad2373",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': ObjectId('64e4bd926f6196002a667035'), 'name': 'xyz', 'branch': 'cs', 'course': 'b.tech'}\n",
      "{'_id': ObjectId('64e4be886f6196002a667036'), 'color': 'red', 'value': '#f00'}\n",
      "{'_id': ObjectId('64e4be886f6196002a667037'), 'color': 'green', 'value': '#0f0'}\n",
      "{'_id': ObjectId('64e4be886f6196002a667038'), 'color': 'blue', 'value': '#00f'}\n",
      "{'_id': ObjectId('64e4be886f6196002a667039'), 'color': 'cyan', 'value': '#0ff'}\n",
      "{'_id': ObjectId('64e4be886f6196002a66703a'), 'color': 'magenta', 'value': '#f0f'}\n",
      "{'_id': ObjectId('64e4be886f6196002a66703b'), 'color': 'yellow', 'value': '#ff0'}\n",
      "{'_id': ObjectId('64e4be886f6196002a66703c'), 'color': 'black', 'value': '#000'}\n"
     ]
    }
   ],
   "source": [
    "for i in coll_AGARWAL.find():\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29f5fabe-d534-4bc8-a211-a0ef35ec1f7d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_id\n",
      "name\n",
      "branch\n",
      "course\n"
     ]
    }
   ],
   "source": [
    "for i in coll_AGARWAL.find_one():\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7035c4d9-7977-4ad5-abc2-29abaee9f493",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q5. Explain how you can use the find() method to query the MongoDB database. Write a simple code to demonstrate this.\n",
    "\n",
    "data3 = [\n",
    "        {\n",
    "                \"agreements\" : 60\n",
    "        },\n",
    "        {\n",
    "                \"libraries\" : 45\n",
    "        },\n",
    "        {\n",
    "                \"templates\" : 9\n",
    "        },\n",
    "        {\n",
    "                \"users\" : 19\n",
    "        }\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bc9f07e7-73fe-4368-b7cc-00436d4f1881",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pymongo.results.InsertManyResult at 0x7fe200575fc0>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coll_AGARWAL.insert_many(data3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "dad26358-b15f-4594-93d7-09618cd42b6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': ObjectId('64e4bd926f6196002a667035'), 'name': 'xyz', 'branch': 'cs', 'course': 'b.tech'}\n"
     ]
    }
   ],
   "source": [
    "for i in coll_AGARWAL.find({'name': 'xyz'}):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ef95c85-3f69-4698-9a20-42795afabb0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q6. Explain the sort() method. Give an example to demonstrate sorting in MongoDB.\n",
    "\n",
    "The sort() method specifies the order in which the query returns the matching documents from the given collection."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3b5082fe-21bd-4421-98b3-6bc55b692383",
   "metadata": {},
   "outputs": [],
   "source": [
    "data4 = [\n",
    "    {\"id\" : 12 , \"name\" : \"xyz\"},\n",
    "    {\"id\" : 1 , \"name\" : \"abc\"},\n",
    "    {\"id\" : 5 , \"name\" : \"mno\"},\n",
    "    {\"id\" : 21 , \"name\" : \"bcs\"},\n",
    "    {\"id\" : 6 , \"name\" : \"cds\"}\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b942710a-ffee-43b6-96e5-c8a4f79704f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pymongo.results.InsertManyResult at 0x7fe1df9e6560>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coll_AGARWAL.insert_many(data4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3a348cad-a385-451b-9179-33ba6c4e8d04",
   "metadata": {},
   "outputs": [],
   "source": [
    "query_result = db.my_data.find().sort([(\"id\",1)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "929ab79a-536f-433b-b3be-f0257ddd55c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': ObjectId('64e4bd926f6196002a667035'), 'name': 'xyz', 'branch': 'cs', 'course': 'b.tech'}\n",
      "{'_id': ObjectId('64e4be886f6196002a667036'), 'color': 'red', 'value': '#f00'}\n",
      "{'_id': ObjectId('64e4be886f6196002a667037'), 'color': 'green', 'value': '#0f0'}\n",
      "{'_id': ObjectId('64e4be886f6196002a667038'), 'color': 'blue', 'value': '#00f'}\n",
      "{'_id': ObjectId('64e4be886f6196002a667039'), 'color': 'cyan', 'value': '#0ff'}\n",
      "{'_id': ObjectId('64e4be886f6196002a66703a'), 'color': 'magenta', 'value': '#f0f'}\n",
      "{'_id': ObjectId('64e4be886f6196002a66703b'), 'color': 'yellow', 'value': '#ff0'}\n",
      "{'_id': ObjectId('64e4be886f6196002a66703c'), 'color': 'black', 'value': '#000'}\n",
      "{'_id': ObjectId('64e4c2de6f6196002a66703d'), 'agreements': 60}\n",
      "{'_id': ObjectId('64e4c2de6f6196002a66703e'), 'libraries': 45}\n",
      "{'_id': ObjectId('64e4c2de6f6196002a66703f'), 'templates': 9}\n",
      "{'_id': ObjectId('64e4c2de6f6196002a667040'), 'users': 19}\n",
      "{'_id': ObjectId('64e4c6636f6196002a667042'), 'id': 1, 'name': 'abc'}\n",
      "{'_id': ObjectId('64e4c6636f6196002a667043'), 'id': 5, 'name': 'mno'}\n",
      "{'_id': ObjectId('64e4c6636f6196002a667045'), 'id': 6, 'name': 'cds'}\n",
      "{'_id': ObjectId('64e4c6636f6196002a667041'), 'id': 12, 'name': 'xyz'}\n",
      "{'_id': ObjectId('64e4c6636f6196002a667044'), 'id': 21, 'name': 'bcs'}\n"
     ]
    }
   ],
   "source": [
    "for i in query_result:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "8a10aa05-5294-40d3-a170-649c3fc03e19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pymongo.results.DeleteResult at 0x7fe1df3642e0>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Q7. Explain why delete_one(), delete_many(), and drop() is used.\n",
    "\n",
    "db.my_data.delete_one({'name': 'abc'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "72f3e3ef-6037-4e24-a279-f4c72d7de145",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': ObjectId('64e4bd926f6196002a667035'), 'name': 'xyz', 'branch': 'cs', 'course': 'b.tech'}\n",
      "{'_id': ObjectId('64e4be886f6196002a667036'), 'color': 'red', 'value': '#f00'}\n",
      "{'_id': ObjectId('64e4be886f6196002a667037'), 'color': 'green', 'value': '#0f0'}\n",
      "{'_id': ObjectId('64e4be886f6196002a667038'), 'color': 'blue', 'value': '#00f'}\n",
      "{'_id': ObjectId('64e4be886f6196002a667039'), 'color': 'cyan', 'value': '#0ff'}\n",
      "{'_id': ObjectId('64e4be886f6196002a66703a'), 'color': 'magenta', 'value': '#f0f'}\n",
      "{'_id': ObjectId('64e4be886f6196002a66703b'), 'color': 'yellow', 'value': '#ff0'}\n",
      "{'_id': ObjectId('64e4be886f6196002a66703c'), 'color': 'black', 'value': '#000'}\n",
      "{'_id': ObjectId('64e4c2de6f6196002a66703d'), 'agreements': 60}\n",
      "{'_id': ObjectId('64e4c2de6f6196002a66703e'), 'libraries': 45}\n",
      "{'_id': ObjectId('64e4c2de6f6196002a66703f'), 'templates': 9}\n",
      "{'_id': ObjectId('64e4c2de6f6196002a667040'), 'users': 19}\n",
      "{'_id': ObjectId('64e4c6636f6196002a667041'), 'id': 12, 'name': 'xyz'}\n",
      "{'_id': ObjectId('64e4c6636f6196002a667043'), 'id': 5, 'name': 'mno'}\n",
      "{'_id': ObjectId('64e4c6636f6196002a667044'), 'id': 21, 'name': 'bcs'}\n",
      "{'_id': ObjectId('64e4c6636f6196002a667045'), 'id': 6, 'name': 'cds'}\n"
     ]
    }
   ],
   "source": [
    "for i in coll_AGARWAL.find():\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf79ad82-e540-4031-bc91-938bcd3e8faf",
   "metadata": {},
   "outputs": [],
   "source": [
    "db.my_data.delete_many({\"id\":{\"$gt\":6}})"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
